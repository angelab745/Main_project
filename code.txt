#define SOUND_SENSOR_PIN A0  // VP pin
const int sampleWindow = 2000; //2 Sec
unsigned int sample;
int db;

#define SMOKE_SENSOR_PIN A3 // VN pin
int Smoke;

int Smoke_limit=65;
int Sound_limit=93;

#include <Adafruit_GFX.h>        
#include <Adafruit_SSD1306.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define OLED_RESET    -1 
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);  

#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid     = "POCO M2 Pro";
const char* password = "alaina123";
String apiKeyValue = "tPmAT5Ab3j7F9";

String sensorName = "Noise&Air Quality";
String sensorLocation = "EKM";

String Notification="";

void setup() {
  Serial.begin(115200);
  pinMode (SOUND_SENSOR_PIN, INPUT);
  pinMode (SMOKE_SENSOR_PIN, INPUT);

  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(500);

WiFi.begin(ssid, password);
  Serial.println("Connecting");

      display.clearDisplay();
     display.setTextSize(1);                    
     display.setTextColor(WHITE);             
     display.setCursor(25,30);                
     display.println("Searching for WIFI");  
     display.display();
     
    while(WiFi.status() != WL_CONNECTED) { 
    delay(500);
    Serial.print(".");
    }

     display.clearDisplay();
     display.setTextSize(1);                    
     display.setTextColor(WHITE);             
     display.setCursor(0,0);                
     display.println("WiFi network with IP:"); 
     display.setCursor(20,15);
     display.println(WiFi.localIP());  
     display.display();
     delay(4000);
     
  Serial.println("");
  Serial.print("Connected to WiFi network with IP Address: ");
  
  Serial.println(WiFi.localIP());

}
void loop() {

 Smoke=analogRead(SMOKE_SENSOR_PIN);
  Serial.print("Smoke:");
  Serial.print(Smoke);
  Smoke=map(Smoke,0,4096,0,100);
 
  unsigned long startMillis = millis();  // Start of sample window
  float peakToPeak = 0;  // peak-to-peak level
  unsigned int signalMax = 250;  //minimum value
  unsigned int signalMin = 4096;  //maximum value
  
  // collect data 
  while (millis() - startMillis < sampleWindow)
  {
    sample = analogRead(SOUND_SENSOR_PIN);  //get reading from microphone
     
            if (sample < 4096)  
               {
                if (sample > signalMax)
                   {
                    signalMax = sample;  // save just the max levels
                   }
                else if (sample < signalMin)
                   {
                    signalMin = sample;  // save just the min levels
                   }
      
               }
}

  peakToPeak = signalMax - signalMin;  // max - min = peak-peak amplitude
  Serial.print("    peakToPeak:");
  Serial.print(peakToPeak);
  
  db = map(peakToPeak, 200, 3000, 0, 100);  //calibrate for deciBels

  Serial.print("   Loudness:");
  Serial.println(db);

Display();
Sent_Data();
}


void Display(){

     display.clearDisplay();
     display.setTextSize(1);                    
     display.setTextColor(WHITE);
                  
     display.setCursor(0,0);                
     display.print("Sound level:");  
     display.print(db);  
     display.println(" dB");
      
     display.setCursor(0,20);
     display.print("AIR Quality: ");
     display.println(Smoke);

     

     if(db>=Sound_limit){
     
     display.setCursor(20,35);
     display.print("Noise Pollution");
     Notification="Noise Pollution";
     }
     
     if(Smoke>=Smoke_limit){
     display.setCursor(10,48);
     display.print("Bad Air Quality");
     Notification="Bad Air Quality";
     }
     if(db>=Sound_limit && Smoke>=Smoke_limit){
     display.setCursor(20,35);
     display.print("Noise Pollution");
     display.setCursor(10,48);
     display.print("Bad Air Quality");
     Notification="Noise & Air pollution";
     }
     if(db<Sound_limit && Smoke <Smoke_limit){
      Notification="Normal";
     }
     
      
     display.display();
     delay(100);
}


void Sent_Data(){

  if(WiFi.status()== WL_CONNECTED ){
    
      HTTPClient http; 
      http.begin("http://192.168.218.31/sensordata/post-esp-data.php");
      http.addHeader("Content-Type", "application/x-www-form-urlencoded");  
      String httpRequestData = "api_key=" + apiKeyValue + "&sensor=" + sensorName+ "&location=" + sensorLocation + "&value1=" + db+ "&value2=" + Smoke + "&value3=" + Notification + "";
      Serial.print("Upload_Data: ");
      Serial.println(httpRequestData); 

      int httpResponseCode = http.POST(httpRequestData);
      Serial.print("Upload_ResponseCode: ");
      Serial.println(httpResponseCode); 
      delay(1000);
      
  if(httpResponseCode==200){
     display.clearDisplay();
     display.setTextSize(1);                    
     display.setTextColor(WHITE);             
     display.setCursor(5,15);                
     display.println("Data saved in server"); 
     display.setCursor(30,35);
     display.println("Thank you");  
     display.display();
     delay(3000);
     }
     else if(httpResponseCode<0){
     display.clearDisplay();
     display.setTextSize(1);                    
     display.setTextColor(WHITE);             
     display.setCursor(30,15);                
     display.println("Server Error"); 
     display.setCursor(30,35);
     display.println("Try Again");  
     display.display();
     delay(3000);
     }
     
     }


     
      else {
             Serial.println("WiFi Disconnected");
            
           }


}